Executable Linkable Format

Tables:
	- file header
	- program header
	- section headers

## ELF FILE HEADER
	Commands:
		readelf [executable] -h
			the -h argument is to give the result of the headers table from the elf
	Example:
	-> user@host$ readelf print64.out -h

	The ELF file header fields subdivide into four main groups: the ELF file header 
	information, information about the program’s target platform, the program entry 
	point field, and the table location fields.

	ELF Header:
	  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
	  Class:                             ELF64
	  Data:                              2's complement, little endian
	  Version:                           1 (current)
	  OS/ABI:                            UNIX - System V
	  ABI Version:                       0
	  Type:                              EXEC (Executable file)
	  Machine:                           AArch64
	  Version:                           0x1
	  Entry point address:               0x4004d0
	  Start of program headers:          64 (bytes into file)
	  Start of section headers:          6528 (bytes into file)
	  Flags:                             0x0
	  Size of this header:               64 (bytes)
	  Size of program headers:           56 (bytes)
	  Number of program headers:         8
	  Size of section headers:           64 (bytes)
	  Number of section headers:         24
	  Section header string table index: 23

		MAGIC FIELD:   The magic field is a constant 16- byte binary pattern (ident pattern)
			       It always starts with the same 4- byte sequence, beginning with byte 0x7f followed by  
				 3 bytes corresponding to the ASCII characters ELF

		CLASS FIELD:   Normally specifies which elf class it is
		DATA FIELD:    tells the loader that the ELF file’s own fields should be read as either big-  or little- endian
				 ELF files on Arm normally use the little- endian encoding for the ELF file format itself
		VERSION FIELD: the loader that we are using version 1 of the ELF file format. This field is designed to future- proof the ELF file format.

		MACHINE FIELD:
		  tells the loader what processor class the program is designed 
		  to run on. Our 64- bit program sets this field to AArch64, indicating that the ELF file
		  will run only on 64- bit Arm processors. Our 32- bit program specifies ARM, 
		  which means it will run only on 32- bit Arm processors or as a 32- bit process on 
		  a 64- bit Linux machine using the processor’s 32- bit AArch32 execution mode

		TODO: Research AArch32 execution mode

		FLAGS FIELD:
		  The flags field specifies additional information that might be needed by the 
		  loader. This field is architecture- specific. In our 64- bit program, for example, no 
		  architecture- specific flags are defined, and this field will always hold the value 
		  zero. For our 32- bit Arm program, by contrast, this field informs the loader that 
		  the program is compiled to use the embedded ABI (EABI) profile version 5 and 
		  that the program expects hardware- support for floating point operations. The 
		  Arm specification defines four Arm- specific values that can be placed in the 
		  e_flags field of the ELF program header
			-------- ARM 32bit e_flags values ---------
		 EF_ARM_ABIMASK (0xff000000)
			The top 8 bits of the e_flags value hold the 
			ABI used by the ELF file. Currently this top byte 
			should hold the value 5 (i.e., 0x05000000), 
			meaning the ELF file uses EABI version 5.
		 EF_ARM_BE8 (0x00800000)
			 Specifies that the ELF file contains BE- 8 code.
		EF_ARM_ABI_FLOAT_HARD (0x00000400)
			 Specified to indicate that the ELF file conforms to 
			 the Arm hardware floating- point procedure call 
			 standard, which means the processor will be 
			 Armv7 or above and include the VFP3- D16 
			 floating- point hardware extension. 4
		 EF_ARM_ABI_FLOAT_SOFT (0x00000200)
			 Specified to indicate that the ELF file conforms to 
			 the software floating- point procedure call 
			 standard. Floating- point operations are handled 
			 via calls to library functions that emulate floating 
			 points in software

		TYPE FIELD: specifies what the purpose of the ELF file is. In this case, 
			    the type field specifies that these programs are dynamically linked binaries that 
			    a system loader can prepare and then execute

		ENTRY POINT FIELD: of the ELF header tells the loader where the program 
				   entry point is. When the program has been prepared in memory by the operating 
				   system or loader and is ready to begin executing, this field specifies where that 
				   starting location is
			--------- C, C++ vs Entry Point ----------
			 Although, by convention, C and C++ programs “begin” at the main function, 
			 programs do not actually begin execution here. Instead, they begin execution in 
			 a small stub of assembly code, traditionally at the symbol called _start. When 
			 linking against the standard C runtime, the _start function is usually a small 
			 stub of code that passes control to the libc helper function __libc_start_main. 
			 This function then prepares the parameters for the program’s main function and 
			 invokes it. The main function then runs the program’s core logic, and if main 
			 returns to __libc_start_main, the return value of main is then passed to exit 
			 to gracefully exit the program.

		TABLE LOCATION FIELDS:
			   The remaining fields of the ELF header are generally uninteresting to binary 
				analysts— unless you want to write code to parse ELF files manually. They 
				describe to the loader the location and number of program and section headers 
				in the file, as well as provide pointers to special sections containing the string 
				table and the symbol table, which we will describe later. The loader uses these 
				fields to prepare the ELF file in memory ready for execution.  

# ELF PROGRAM HEADERS			
	The program headers table describes to the loader, in effect, how to bring the ELF 
	binary into memory efficiently.
	Program headers differ from section headers in that, although they both describe 
	the program’s layout, the program headers do so in a mapping-centric way, whereas 
	the section headers do so in more fine- grained logical units. The program headers 
	define a series of segments, each telling the kernel how to get the program off 
	the ground in the first place. These segments specify how and where to load 
	the ELF file’s data into memory, whether the program needs a runtime loader 
	to bootstrap it, what the initial layout of the primary thread’s thread- local- 
	storage should look like, and other kernel- relevant metadata such as whether 
	the program should be given executable thread stacks

	Command:
		user@arm64:~$ readelf [executable] - lW
	Example result:
		Elf file type is DYN (Shared object file) 
		Entry point 0x6a0 
		There are 9 program headers, starting at offset 64 
		Program Headers: 
		  Type         Offset   VirtAddr        PhysAddr           FileSiz  MemSiz   Flg Align 
		  PHDR         0x000040 0x...40         0x...40            0x0001f8 0x0001f8 R   0x8 
		  INTERP       0x000238 0x...238        0x...238           0x00001b 0x00001b R   0x1 
		      [Requesting         
		program interpreter: /lib/ld- linux- aarch64.so.1] 
		LOAD         
		0x000000 0x...00          0x...00            0x000a3c 0x000a3c R E 0x10000 
		  LOAD         0x000db8 0x...10db8       0x...10db8             
		0x000288 0x000290 RW  0x10000 
		  DYNAMIC      0x000dc8 0x...10dc8       0x...10dc8             
		  NOTE         0x000254 0x...254         0x...254               
		  GNU_EH_FRAME 0x000914 0x...914         0x...914               
		  GNU_STACK    0x000000 0x...00          0x...00                
		  GNU_RELRO    0x000db8 0x...10db8       0x...10db8             
		Section to Segment mapping: 
		  Segment Sections... 
		   00 
		   01     .interp 
		0x0001e0 0x0001e0 RW  0x8 
		0x000044 0x000044 R   0x4 
		0x000044 0x000044 R   0x4 
		0x000000 0x000000 RW  0x10 
		0x000248 0x000248 R   0x1 
		   02     .interp .note.ABI- tag .note.gnu.build- id .gnu.hash .dynsym 
		.dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .text 
		.fini .rodata .eh_frame_hdr .eh_frame
		   03     .init_array .fini_array .dynamic .got .got.plt .data .bss 
		   04     .dynamic 
		   05     .note.ABI- tag .note.gnu.build- id 
		   06     .eh_frame_hdr 
		   07 
		   08   .init_array .fini_array .dynamic .got 


	---THE PHDR---
		(Program HeaDeR) is the meta- segment containing the program header 
		tables and metadata itself.

	---THE INTERP PROGRAM HEADER---
		The INTERP header is used to tell the operating system that an ELF file  
		needs the help of another program to bring itself into memory. In almost all 
		cases, this program will be the operating system loader file, which in this case 
		is at the path /lib/ld-linux-aarch64.so.1.
		 When a program is executed, the operating system uses this header to load 
		the supporting loader into memory and schedules the loader, rather than the 
		program itself, as the initial target for execution. The use of an external loader 
		is necessary if the program makes use of dynamically linked libraries. The 
		external loader manages the program’s global symbol table, handles connecting 
		binaries together in a process called relocation, and then eventually calls into the 
		program’s entry point when it is ready.
